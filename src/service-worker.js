/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import {Router} from 'workbox-routing';
clientsClaim();
// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);
precacheAndRoute(["./heart.png", "./heartgrey.png", "logo192.png"])
self.addEventListener('install', (event) => {
  event.waitUntil((async () => {
    const cache = await caches.open("documents");
    // Setting {cache: 'reload'} in the new request will ensure that the response
    // isn't fulfilled from the HTTP cache; i.e., it will be from the network.
    await cache.add("offline.html");
  
  })());
});
// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/

registerRoute(
  new RegExp("./locales/en/translation.json"),
    new StaleWhileRevalidate({
     cacheName: 'english',
     plugins:[
       new ExpirationPlugin({maxEntries: 1}),
     ],
   })
  );
registerRoute(
new RegExp("./locales/.*/translation.json"),
  new StaleWhileRevalidate({
   cacheName: 'languages',
   plugins:[
     new ExpirationPlugin({maxEntries: 1}),
   ],
 })
);
registerRoute(
new RegExp("./Documents/.*"),
  new StaleWhileRevalidate({
   cacheName: 'testing',
   plugins:[
     new ExpirationPlugin({maxEntires:1}),
   ],
 })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});


/*addEventListener('fetch', event => {
  // Prevent the default, and handle the request ourselves.
  event.respondWith(async function() {
    const offlineCache = await caches.open("documents")
    const offlineResponse = await offlineCache.match("offline.html")
    const favoritesCache = await caches.open('favorites')
    const favoritesResponse = await favoritesCache.match(event.request.url)
    if (favoritesResponse != undefined){
      console.log("found document in favorites cache")
      return favoritesResponse
    }
    const documentsCache = await caches.open("documents")
    const documentsResponse = await documentsCache.match(event.request.url)
    if (documentsResponse != undefined){
      console.log("found document in documents cache")
      return documentsResponse
    }
    
    
    if (event.request.url.includes("/Documents")){
    documentsCache.add(event.request.url)
    }
    console.log("getting document from network ):")
    return fetch(event.request, { redirect: "follow" }).catch((error) =>
    {
      if (event.request.url.includes("Documents")){
        console.log("attempting to reach from offline")
        return offlineResponse
        
      }
    })
  }());
});
*/
self.addEventListener('fetch', (event) => {
  // We only want to call event.respondWith() if this is a navigation request
  // for an HTML page.
  if (event.request.url.includes("Documents")) {
    event.respondWith((async () => {
      try {
        
        const networkResponse = await fetch(event.request);
        return networkResponse;
      } catch (error) {
        console.log('Fetch failed; returning offline page instead.', error);

        const cache = await caches.open("documents");
        const cachedResponse = await cache.match("offline.html");
        return cachedResponse;
      }
    })());
  }
})
